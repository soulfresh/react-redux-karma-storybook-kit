// Spacing / Measurement
$s-xxxs : 4  !default;
$s-xxs  : 8  !default;
$s-xs   : 10 !default;
$s-s    : 15 !default;
$s-m    : 20 !default;
$s-l    : 30 !default;
$s-xl   : 35 !default;
$s-xxl  : 50 !default;
$s-xxxl : 70 !default;

$sizes: (
  default: $s-m,
  xxxl: $s-xxxl,
  xxl : $s-xxl,
  xl  : $s-xl,
  l   : $s-l,
  m   : $s-m,
  s   : $s-s,
  xs  : $s-xs,
  xxs : $s-xxs,
  xxxs: $s-xxxs
) !default;

// Border radii
$r-s: 2 !default;
$r-m: 5 !default;
$r-l: 12 !default;

$radii: (
  s: $r-s,
  m: $r-m,
  l: $r-l,
);

$grid-breakpoints: (
  default: 0,
  xs: 360px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
) !default;

////
// Convert a pixel value into a rem value.
// Do not pass the pixel unit (ie. 10px); just pass the value (ie. 10).
//
// Ex: `margin: rem(10);`
////
@function rem($pixels) {
  // If you want to debug things in pixel values, uncomment the following...
  // @return $pixels * 1px;
  @return ($pixels / $base-font) * 1rem;
}

////
// Get one of standard measurements (sizes) from the theme.
//
// Ex: `margin: size(xxl);`
////
@function size($size: default) {
  $s: map-get($sizes, $size);

  @if $s == null {
    @error('Could not find measurement/size #{$size} on the theme provided: #{$sizes}');
  }

  @return rem($s);
}

@function radius($size: m) {
  $s: map-get($radii, $size);

  @if $s == null {
    @error('Could not find measurement/size #{$size} on the theme provided: #{$sizes}');
  }

  @return rem($s);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Make any sizing property responsive.
//
// Ex:
// @include responsive-sizing(30px, margin);
// @include responsive-sizing(2rem, width);
@mixin responsive-sizing($size, $prop: padding) {
  $size-down: $size * 0.5;

  #{$prop}: rem($size-down);
  @include media-breakpoint-up(md) {
    #{$prop}: rem($size);
  }
}
