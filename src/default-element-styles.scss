/* Default Element Styles */
@import 'theme';

button, .button {
  display: inline-block;
  padding: size(s) size(xl);
  border: none;
  border-radius: radius();
  transition: background-color speed(s) linear, color speed(s) linear;

  font-size: font-size();
  cursor: pointer;

  &:not(.transparent):not(.link) {
    color: foreground-dark();
    background: color(grayscale, 900);
  }

  &:hover,
  &:focus,
  &:active {
    outline: none;
  }

  &.transparent {
    background-color: transparent;

    &:focus,
    &:active,
    &:hover {
      background-color: background(hover);
    }
  }

  $colors: primary, secondary, success, warn, error;
  @each $color in $colors {
    &.#{$color} {
      &:not(.transparent):not(.link) {
        background-color: color($color, 600);

        &:hover:not(.focused) {
          background-color: color($color, 500);
        }
      }

      &.transparent {
        color: color($color);

        &:hover:not(.focused) {
          color: color($color, 500);
        }
      }
    }
  }

  &.secondary:not(.link) {
    background-color: background-dark(fade);
  }

  &:hover {
    &:not([disabled]):not(.transparent) {
      background-color: color(grayscale, 700);
    }
  }

  &:focus,
  &:active,
  &.focused {
    &:not(.transparent):not(.link) {
      background-color: background-dark(focus);

      &:hover {
        background-color: rgba(background-dark(focus), 0.7) !important;
      }
    }

    &.transparent {
      color: foreground(focus);
    }
  }

  &[disabled] {
    @include disabled;
  }
}

a, .link {
  padding: size(xxxs);
  background: none;
  border: none;
  color: color(primary);
  text-decoration: none;
  transition: color speed(s) linear;

  $colors: primary, secondary, success, warn, error;
  @each $color in $colors {
    &.#{$color}:not(.button) {
      color: color($color);

      &:hover:not(.focused) {
        color: color($color, 400);
      }
    }
  }

  &:hover,
  &:active,
  &:focus,
  &.focused {
    &:not([disabled]):not(.button) {
      color: foreground(focus);
      outline: none;
      background: none;
      text-decoration: underline;
    }
  }

  &[disabled] {
    @include disabled;
  }
}

a.button {
  &:hover,
  &:focus,
  &:active {
    &:not([disabled]) {
      color: foreground-dark();
      text-decoration: none;
    }
  }
}


.icon-button {
  padding: size(s);
  display: inline-flex;
  align-items: center;

  .icon, svg {
    stroke: currentColor;
    overflow: visible;
  }

  .with-text {
    margin: 0 size(xxs) 0 0;
  }

  &.vertical {
    flex-direction: column;

    .with-text {
      margin: 0 0 size(xxxs);
    }
  }

  &.small {
    .icon, svg {
      width: 12px;
      height: 12px;
    }
  }

  &.large {
    .icon, svg {
      width: 30px;
      height: 30px;
    }
  }

  &:focus,
  &:active,
  &:hover {
    color: foreground(focus);
    background-color: transparent;
  }

  &.transparent {
    &:hover,
    &:focus,
    &:active {
      background-color: transparent;
    }
  }
}


input, textarea, select {
  appearance: none;
  font-size: font-size(m);
  margin: 0 0 size(s);

  &:focus {
    outline: none;
  }
}

input, textarea {
  background-color: transparent;
  border-top: none;
  border-left: none;
  border-right: none;
  border-bottom: 1px solid foreground(divider);
  border-radius: 0;
  padding-top: size(xxs);
  padding-bottom: size(xxxs);
}

select {
  $arrow-width: rem(11);
  $padding-sides: size(m);
  $padding-right: $padding-sides * 2 + $arrow-width;
  $arrow-icon: url("data:image/svg+xml,%3Csvg width='100%25' height='100%25' viewBox='0 0 11 5' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%0A%3E%3Cpath style='fill: %23ffffff;' d='M0,0l11,0l-5,5l-6,-5Z'/%3E%3C/svg%3E");
  // Use a linear-gradient as the background color in order to prevent
  // Firefox from changing the options menu coloring.
  $background-color: linear-gradient(to bottom, #{background-dark(fade)} 0%, #{background-dark(fade)} 100%);
  $background-color-hover: linear-gradient(to bottom, #{background-dark(hover)} 0%, #{background-dark(hover)} 100%);
  $background-color-focus: linear-gradient(to bottom, #{color(secondary)} 0%, #{color(secondary)} 100%);

  color: foreground-dark();
  border: none;
  border-radius: radius();
  background-image: $arrow-icon, $background-color;
  background-position: right #{$padding-sides} top 50%, 0 0;
  background-repeat: no-repeat, repeat;
  background-size: $arrow-width, 100%;
  padding: size(xs) $padding-right size(xs) $padding-sides;
  cursor: pointer;
  margin-bottom: size(m);

  &:hover {
    background-image: $arrow-icon, $background-color-hover;
  }

  &:focus {
    background-image: $arrow-icon, $background-color-focus;
  }
}

option {
  color: foreground();
}

